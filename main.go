package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"employee-bot/google_sheets"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"google.golang.org/api/sheets/v4"
)

var (
	userRoles     = make(map[int64]string)
	userLocations = make(map[int64]string)
	userStates    = make(map[int64]string)
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	sheetsService, err := google_sheets.InitSheetService()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ Google Sheets: %v", err)
	}
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets!")

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –±–æ—Ç–∞: ", err)
	}
	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
	initSheetHeaders(sheetsService)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		username := strings.TrimSpace(update.Message.From.FirstName + " " + update.Message.From.LastName)

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%d): %s", username, chatID, update.Message.Text)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
		switch update.Message.Text {
		case "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
			delete(userStates, chatID)
			showMainMenu(bot, chatID)
			continue
		case "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
			resetUserData(chatID)
			sendRoleSelection(bot, chatID)
			continue
		case "üìç –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å":
			askForLocation(bot, chatID)
			continue
		case "‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å":
			showUserStatus(bot, chatID)
			continue
		case "/start":
			resetUserData(chatID)
			sendRoleSelection(bot, chatID)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if state, exists := userStates[chatID]; exists {
			switch state {
			case "awaiting_role":
				processRoleSelection(bot, chatID, update.Message.Text)
				continue
			case "awaiting_location":
				processLocationSelection(bot, chatID, update.Message.Text)
				continue
			case "awaiting_status":
				processStatusSelection(bot, sheetsService, chatID, username, update.Message.Text)
				continue
			}
		}

		// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
		switch update.Message.Text {
		case "‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ", "üè† –£—à—ë–ª":
			writeStatus(bot, sheetsService, chatID, username, getStatusFromText(update.Message.Text))
		default:
			if _, hasRole := userRoles[chatID]; !hasRole {
				sendRoleSelection(bot, chatID)
			} else {
				showMainMenu(bot, chatID)
			}
		}
	}
}

func initSheetHeaders(service *sheets.Service) {
	_, err := service.Spreadsheets.Values.Update(
		os.Getenv("GOOGLE_SHEET_ID"),
		"Users!A1:G1",
		&sheets.ValueRange{
			Values: [][]interface{}{
				{"–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–†–æ–ª—å", "–ê–¥—Ä–µ—Å", "–î–µ–π—Å—Ç–≤–∏–µ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"},
			},
		},
	).ValueInputOption("RAW").Do()

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}
}

func resetUserData(chatID int64) {
	delete(userRoles, chatID)
	delete(userLocations, chatID)
	delete(userStates, chatID)
}

func processRoleSelection(bot *tgbotapi.BotAPI, chatID int64, text string) {
	if text == "–ë–∞—Ä–±–µ—Ä" || text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" {
		userRoles[chatID] = text
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –†–æ–ª—å ¬´%s¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", text))
		bot.Send(msg)

		if text == "–ë–∞—Ä–±–µ—Ä" {
			askForLocation(bot, chatID)
		} else {
			askForStatus(bot, chatID)
		}
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		bot.Send(msg)
		sendRoleSelection(bot, chatID)
	}
}

func processLocationSelection(bot *tgbotapi.BotAPI, chatID int64, text string) {
	if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" {
		delete(userStates, chatID)
		showMainMenu(bot, chatID)
		return
	}

	if contains([]string{"–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–í–æ—Å—Ç–æ–∫"}, text) {
		userLocations[chatID] = text
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å: %s", text))
		bot.Send(msg)
		askForStatus(bot, chatID)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		bot.Send(msg)
		askForLocation(bot, chatID)
	}
}

func processStatusSelection(bot *tgbotapi.BotAPI, service *sheets.Service, chatID int64, username, text string) {
	if text == "‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ" || text == "üè† –£—à—ë–ª" {
		writeStatus(bot, service, chatID, username, getStatusFromText(text))
		delete(userStates, chatID)
		showMainMenu(bot, chatID)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		bot.Send(msg)
		askForStatus(bot, chatID)
	}
}

func showUserStatus(bot *tgbotapi.BotAPI, chatID int64) {
	role := userRoles[chatID]
	location, hasLocation := userLocations[chatID]

	msgText := fmt.Sprintf("üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\nüë§ –†–æ–ª—å: %s\n", role)
	if hasLocation {
		msgText += fmt.Sprintf("üìç –õ–æ–∫–∞—Ü–∏—è: %s\n", location)
	}

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ReplyMarkup = createMainMenuKeyboard()
	bot.Send(msg)
}

func sendRoleSelection(bot *tgbotapi.BotAPI, chatID int64) {
	userStates[chatID] = "awaiting_role"
	msg := tgbotapi.NewMessage(chatID, "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ë–∞—Ä–±–µ—Ä"),
			tgbotapi.NewKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	bot.Send(msg)
}

func askForLocation(bot *tgbotapi.BotAPI, chatID int64) {
	userStates[chatID] = "awaiting_location"
	msg := tgbotapi.NewMessage(chatID, "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–¶–µ–Ω—Ç—Ä"),
			tgbotapi.NewKeyboardButton("–°–µ–≤–µ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–Æ–≥"),
			tgbotapi.NewKeyboardButton("–í–æ—Å—Ç–æ–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	bot.Send(msg)
}

func askForStatus(bot *tgbotapi.BotAPI, chatID int64) {
	userStates[chatID] = "awaiting_status"
	msg := tgbotapi.NewMessage(chatID, "–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ"),
			tgbotapi.NewKeyboardButton("üè† –£—à—ë–ª"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	bot.Send(msg)
}

func showMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	msg.ReplyMarkup = createMainMenuKeyboard()
	bot.Send(msg)
}

func createMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ"),
			tgbotapi.NewKeyboardButton("üè† –£—à—ë–ª"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìç –°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
		),
	)
}

func writeStatus(bot *tgbotapi.BotAPI, service *sheets.Service, chatID int64, fullName, status string) {
	now := time.Now()
	record := []interface{}{
		now.Format("2006-01-02"),
		now.Format("15:04:05"),
		fullName,
		userRoles[chatID],
		userLocations[chatID],
		status,
		"",
	}

	_, err := service.Spreadsheets.Values.Append(
		os.Getenv("GOOGLE_SHEET_ID"),
		"Users!A:G",
		&sheets.ValueRange{
			Values: [][]interface{}{record},
		},
	).ValueInputOption("RAW").Do()

	var msgText string
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
		msgText = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	} else {
		if status == "–ü—Ä–∏—à–µ–ª" {
			msgText = "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
		} else {
			msgText = "üè† –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ReplyMarkup = createMainMenuKeyboard()
	bot.Send(msg)
}

func getStatusFromText(text string) string {
	if text == "‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ" {
		return "–ü—Ä–∏—à–µ–ª"
	}
	return "–£—à—ë–ª"
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
